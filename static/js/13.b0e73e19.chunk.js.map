{"version":3,"sources":["views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/Profile/utils/sortUserActivity.tsx","views/Nft/market/Profile/components/EditProfileAvatar.tsx","views/Nft/market/Profile/components/ProfileHeader.tsx","views/Nft/market/Profile/components/TabMenu.tsx","views/Nft/market/Profile/components/Achievements/AchievementAvatar.tsx","views/Nft/market/Profile/components/Achievements/AchievementTitle.tsx","views/Nft/market/Profile/components/Achievements/AchievementDescription.tsx","views/Nft/market/Profile/components/Achievements/AchievementCard.tsx","views/Nft/market/Profile/components/Achievements/AchievementsList.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/PointsLabel.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx","views/Nft/market/Profile/components/Achievements/ClaimPointsCallout.tsx","views/Nft/market/Profile/components/Achievements/index.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityEventText.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityPrice.tsx","views/Nft/market/Profile/components/ActivityHistory/MobileModal.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityRow.tsx","views/Nft/market/Profile/components/ActivityHistory/TableLoader.tsx","views/Nft/market/Profile/components/NoNftsImage.tsx","views/Nft/market/Profile/components/ActivityHistory/index.tsx","views/Nft/market/Profile/components/SubMenu.tsx","views/Nft/market/Profile/components/UserNfts.tsx","views/Nft/market/Profile/ConnectedProfile.tsx","state/achievements/hooks.ts","views/Nft/market/Profile/hooks/useNftsForAddress.tsx","views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx","views/Nft/market/Profile/UnconnectedProfile.tsx","views/Nft/market/Profile/index.tsx","../node_modules/lodash/times.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/_castFunction.js","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/StatBox.tsx","views/Teams/components/IconStatBox.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx"],"names":["StyledBannerImage","styled","div","attrs","alt","src","theme","colors","cardBorder","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","children","props","flexDirection","mb","position","pb","BannerImage","bottom","left","alignItems","MarketEvent","EditOverlay","StyledEditProfileAvatar","EditProfileAvatar","useModal","EditProfileModal","onEditProfileModal","onClick","AvatarImage","StyledIconButton","IconButton","ProfileHeader","accountPath","profile","achievements","nftCollected","isAchievementsLoading","isNftLoading","isProfileLoading","t","useTranslation","account","useWeb3React","isConnectedAccount","toLowerCase","numNftCollected","formatNumber","numPoints","points","numAchievements","length","avatarImage","nft","image","thumbnail","imagePath","teamId","getBannerImage","display","target","as","href","getBscScanLink","width","color","MarketPageTitle","title","username","truncateHash","description","mr","external","bold","mt","to","StatBox","stat","Tab","button","$active","secondary","textSubtle","background","TabMenu","accountAddress","useParams","pathname","useLocation","useState","includes","achievementsActive","setIsAchievementsActive","useEffect","RouterLink","nftsBaseUrl","NoBadgePlaceholder","BunnyPlaceholderIcon","StyledAchievementAvatar","img","AchievementAvatar","badge","AchievementTitle","key","data","Description","Text","fontSize","AchievementDescription","Details","Flex","AchievementCard","achievement","toLocaleString","Grid","AchievementsList","isLoading","isMobile","useMatchBreakpoints","height","map","id","justifyContent","style","scale","PointsLabel","localePoints","num","ActionColumn","StyledAchievementRow","Body","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","useToast","toastError","toastSuccess","callWithGasPrice","useCallWithGasPrice","handleCollectPoints","a","address","tx","wait","receipt","status","Toast","txHash","transactionHash","px","endIcon","spin","disabled","variant","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","dispatch","useAppDispatch","useProfile","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","filter","prevClaimableAchievement","isActive","totalPointsToCollect","sumBy","Achievements","IconStatBox","icon","PrizeIcon","subtitle","sortUserActivity","userActivities","askOrderHistory","buyTradeHistory","sellTradeHistory","transformTransactions","transactions","transaction","userSeller","seller","marketEvent","SELL","BUY","timestamp","price","askPrice","otherParty","buyer","allActivity","askOrder","orderType","AskOrderType","CANCEL","MODIFY","NEW","getAskOrderEvent","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ActivityEventText","events","text","ActivityPrice","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","justifySelf","maxWidth","undefined","minimumFractionDigits","maximumFractionDigits","RoundedImage","Image","radii","default","MobileModal","activity","localeTimestamp","onDismiss","chainId","useActiveWeb3React","useTheme","priceAsFloat","parseFloat","headerBackground","gradients","cardHeader","textAlign","collectionName","name","p","pt","Link","ActivityRow","isXs","isSm","timestampAsMs","Date","year","month","day","hour","minute","onPresentMobileModal","ProfileCell","GridItem","LoadingRow","TableLoader","NoNftsImage","ActivityHistory","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","sortedUserActivities","setSortedUserActivities","setIsLoading","userActivity","useUserNfts","useBNBBusdPrice","initializationState","UserNftInitializationState","INITIALIZED","isAddress","toLocaleLowerCase","fetchAddressActivity","getUserActivity","addressActivity","console","error","fetchUserActivity","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","tokenId","collectionAddress","collection","getNftsFromDifferentCollectionsApi","nfts","max","Math","ceil","getMaxPages","slice","getActivitiesSlice","nftMeta","find","metaNft","borderTop","page","SubMenuComponent","ItemsConfig","label","BaseSubMenu","items","activeItem","UserNfts","userNftsInitializationState","location","clickedProfileNft","setClickedProfileNft","clickedSellNft","setClickedSellNft","ProfileNftModal","onPresentProfileNftModal","SellModal","nftToSell","onPresentSellModal","gridGap","gridTemplateColumns","marketData","isUserNft","NftLocation","PROFILE","WALLET","FORSALE","handleCollectibleClick","currentAskPrice","isTradable","nftLocation","GridPlaceholder","TabMenuWrapper","Box","ConnectedProfile","useSelector","state","achievementFetchStatus","userNfts","fetchAchievements","useFetchAchievements","useFetchUserNfts","MarketPageHeader","AchievementFetchStatus","FETCHED","Page","minHeight","path","SubMenu","exact","useNftsForAddress","isProfileFetching","combinedNfts","setCombinedNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","getNfts","getCompleteAccountNftData","completeNftData","isEmpty","UnconnectedProfile","useProfileForAddress","profileHookState","isFetching","useAchievementsForAddress","isAchievementFetching","UnconnectedProfileNfts","NftProfile","isConnectedProfile","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","min","module","exports","n","iteratee","index","result","toFinite","value","remainder","identity","GridPlaceholderItem","numItems","times","itemKey","isDark","borderColor","StatBoxItem","mx","fontWeight","invertedContrast","card","SecondaryCard","tertiary","defaultProps","Icon","isDisabled","textTransform","SubMenuItems"],"mappings":"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","file":"static/js/13.b0e73e19.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from 'ntfuikit2'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import { ethers } from 'ethers'\nimport { AskOrder, AskOrderType, TokenMarketData, Transaction } from 'state/nftMarket/types'\n\nexport enum MarketEvent {\n  NEW = 'NEW',\n  CANCEL = 'CANCEL',\n  MODIFY = 'MODIFY',\n  BUY = 'BUY',\n  SELL = 'SELL',\n}\n\nexport interface Activity {\n  marketEvent: MarketEvent\n  timestamp: string\n  tx: string\n  nft?: TokenMarketData\n  price?: string\n  otherParty?: string\n}\n\nexport const sortUserActivity = (\n  account: string,\n  userActivities: { askOrderHistory: AskOrder[]; buyTradeHistory: Transaction[]; sellTradeHistory: Transaction[] },\n): Activity[] => {\n  const { askOrderHistory, buyTradeHistory, sellTradeHistory } = userActivities\n\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactions: Transaction[]): Activity[] => {\n    const transformedTransactions = transactions.map((transaction) => {\n      const userSeller = transaction.seller.id === account.toLowerCase()\n      const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n      const { timestamp, nft } = transaction\n      const price = transaction.askPrice\n      const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n      const tx = transaction.id\n      return { marketEvent, price, otherParty, timestamp, nft, tx }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrders.map((askOrder) => {\n      const marketEvent = getAskOrderEvent(askOrder.orderType)\n      const { timestamp, nft } = askOrder\n      const price = askOrder.askPrice\n      const tx = askOrder.id\n      return { marketEvent, price, timestamp, nft, tx }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [\n    ...transformAskOrders(askOrderHistory),\n    ...transformTransactions(buyTradeHistory),\n    ...transformTransactions(sellTradeHistory),\n  ]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useModal } from 'ntfuikit2'\nimport AvatarImage from 'views/Nft/market/components/BannerHeader/AvatarImage'\nimport EditProfileModal from './EditProfileModal'\n\nconst EditOverlay = styled.div`\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\n  border-radius: 50%;\n  left: 0;\n  height: 100%;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  transition: opacity 300ms;\n  width: 100%;\n  z-index: 1;\n`\n\nconst StyledEditProfileAvatar = styled.div`\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n\n    ${EditOverlay} {\n      opacity: 1;\n    }\n  }\n`\n\nconst EditProfileAvatar: React.FC<{ src: string; alt?: string }> = ({ src, alt }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\n      <AvatarImage src={src} alt={alt} />\n      <EditOverlay />\n    </StyledEditProfileAvatar>\n  )\n}\n\nexport default EditProfileAvatar\n","import React from 'react'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from 'ntfuikit2'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport truncateHash from 'utils/truncateHash'\nimport { Achievement, Profile } from 'state/types'\nimport { useWeb3React } from '@web3-react/core'\nimport EditProfileAvatar from './EditProfileAvatar'\nimport BannerHeader from '../../components/BannerHeader'\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\nimport MarketPageTitle from '../../components/MarketPageTitle'\nimport EditProfileModal from './EditProfileModal'\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\n\ninterface HeaderProps {\n  accountPath: string\n  profile: Profile\n  achievements: Achievement[]\n  nftCollected: number\n  isAchievementsLoading: boolean\n  isNftLoading: boolean\n  isProfileLoading: boolean\n}\n\nconst StyledIconButton = styled(IconButton)`\n  width: fit-content;\n`\n\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\nconst ProfileHeader: React.FC<HeaderProps> = ({\n  accountPath,\n  profile,\n  achievements,\n  nftCollected,\n  isAchievementsLoading,\n  isNftLoading,\n  isProfileLoading,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\n  const numNftCollected = !isNftLoading ? (nftCollected ? formatNumber(nftCollected, 0, 0) : '-') : null\n  const numPoints = !isProfileLoading ? (profile?.points ? formatNumber(profile.points, 0, 0) : '-') : null\n  const numAchievements = !isAchievementsLoading\n    ? achievements?.length\n      ? formatNumber(achievements.length, 0, 0)\n      : '-'\n    : null\n\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\n\n  const getBannerImage = () => {\n    const imagePath = '/images/teams'\n    if (profile) {\n      switch (profile.teamId) {\n        case 1:\n          return `${imagePath}/storm-banner.png`\n        case 2:\n          return `${imagePath}/flippers-banner.png`\n        case 3:\n          return `${imagePath}/cakers-banner.png`\n        default:\n          break\n      }\n    }\n    return `${imagePath}/no-team-banner.png`\n  }\n\n  const getAvatar = () => {\n    const getIconButtons = () => {\n      return (\n        // TODO: Share functionality once user profiles routed by ID\n        <Flex display=\"inline-flex\">\n          {accountPath && (\n            <StyledIconButton\n              target=\"_blank\"\n              as=\"a\"\n              href={getBscScanLink(accountPath, 'address')}\n              alt={t('View BscScan for user address')}\n            >\n              <BscScanIcon width=\"20px\" color=\"primary\" />\n            </StyledIconButton>\n          )}\n        </Flex>\n      )\n    }\n\n    const getImage = () => {\n      return (\n        <>\n          {profile && accountPath && isConnectedAccount ? (\n            <EditProfileAvatar src={avatarImage} alt={t('User profile picture')} />\n          ) : (\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\n          )}\n        </>\n      )\n    }\n    return (\n      <>\n        {getImage()}\n        {getIconButtons()}\n      </>\n    )\n  }\n\n  const getTitle = () => {\n    if (profile?.username) {\n      return `@${profile.username}`\n    }\n\n    if (accountPath) {\n      return truncateHash(accountPath, 5, 3)\n    }\n\n    return null\n  }\n\n  const renderDescription = () => {\n    const getActivateButton = () => {\n      if (!profile) {\n        return (\n          <ReactRouterLink to=\"/create-profile\">\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\n          </ReactRouterLink>\n        )\n      }\n      return (\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\n          {t('Reactivate Profile')}\n        </Button>\n      )\n    }\n\n    return (\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\n        {accountPath && profile?.username && (\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\n            {truncateHash(accountPath)}\n          </Link>\n        )}\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\n      </Flex>\n    )\n  }\n\n  return (\n    <>\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\n        <StatBox>\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\n          <StatBoxItem title={t('Points')} stat={numPoints} />\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\n        </StatBox>\n      </MarketPageTitle>\n    </>\n  )\n}\n\nexport default ProfileHeader\n","import React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Link as RouterLink, useLocation, useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Flex } from 'ntfuikit2'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst Tab = styled.button<{ $active: boolean }>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  color: ${({ theme, $active }) => ($active ? theme.colors.secondary : theme.colors.textSubtle)};\n  border-width: ${({ $active }) => ($active ? '1px 1px 0 1px' : '0')};\n  border-style: solid solid none solid;\n  border-color: ${({ theme }) =>\n    `${theme.colors.cardBorder} ${theme.colors.cardBorder} transparent ${theme.colors.cardBorder}`};\n  outline: 0;\n  padding: 12px 16px;\n  border-radius: 16px 16px 0 0;\n  font-size: 16px;\n  font-weight: ${({ $active }) => ($active ? '600' : '400')};\n  background-color: ${({ theme, $active }) => ($active ? theme.colors.background : 'transparent')};\n  transition: background-color 0.3s ease-out;\n`\n\nconst TabMenu = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n  const [achievementsActive, setIsAchievementsActive] = useState(pathname.includes('achievements'))\n\n  useEffect(() => {\n    setIsAchievementsActive(pathname.includes('achievements'))\n  }, [pathname])\n\n  return (\n    <Flex>\n      <Tab\n        onClick={() => setIsAchievementsActive(false)}\n        $active={!achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}`}\n      >\n        NFTs\n      </Tab>\n      <Tab\n        onClick={() => setIsAchievementsActive(true)}\n        $active={achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}/achievements`}\n      >\n        {t('Achievements')}\n      </Tab>\n    </Flex>\n  )\n}\n\nexport default TabMenu\n","import React, { ImgHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { BunnyPlaceholderIcon } from 'ntfuikit2'\n\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\n  badge?: string\n}\n\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst StyledAchievementAvatar = styled.img`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\n  if (!badge) {\n    return <NoBadgePlaceholder />\n  }\n\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\n}\n\nexport default AchievementAvatar\n","import React from 'react'\nimport { Text, TextProps } from 'ntfuikit2'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementTitleType } from 'config/constants/types'\n\ninterface AchievementTitleProps extends TextProps {\n  title: AchievementTitleType\n}\n\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\n  const { t } = useTranslation()\n\n  if (typeof title === 'string') {\n    return (\n      <Text bold {...props}>\n        {title}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = title\n\n  return (\n    <Text bold {...props}>\n      {t(key, data)}\n    </Text>\n  )\n}\n\nexport default AchievementTitle\n","import React from 'react'\nimport { Text, TextProps } from 'ntfuikit2'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementDescriptionType } from 'config/constants/types'\nimport styled from 'styled-components'\n\ninterface AchievementDescriptionProps extends TextProps {\n  description?: AchievementDescriptionType\n}\n\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\n  const { t } = useTranslation()\n\n  if (!description) {\n    return null\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\n        {description}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = description\n\n  return (\n    <Description color=\"textSubtle\" {...props}>\n      {t(key, data)}\n    </Description>\n  )\n}\n\nexport default AchievementDescription\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, PrizeIcon, Text } from 'ntfuikit2'\nimport { Achievement } from 'state/types'\nimport AchievementAvatar from './AchievementAvatar'\nimport AchievementTitle from './AchievementTitle'\nimport AchievementDescription from './AchievementDescription'\n\ninterface AchievementCardProps {\n  achievement: Achievement\n}\n\nconst Details = styled(Flex)`\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  return (\n    <Flex>\n      <AchievementAvatar badge={achievement.badge} />\n      <Details>\n        <AchievementTitle title={achievement.title} />\n        <AchievementDescription description={achievement.description} />\n      </Details>\n      <Flex alignItems=\"center\">\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AchievementCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Skeleton, useMatchBreakpoints } from 'ntfuikit2'\nimport { useTranslation } from 'contexts/Localization'\nimport { Achievement } from 'state/types'\nimport AchievementCard from './AchievementCard'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst AchievementsList: React.FC<{ achievements: Achievement[]; isLoading: boolean }> = ({\n  achievements,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  if (isLoading) {\n    if (isMobile) {\n      return <Skeleton width=\"100%\" height=\"64px\" />\n    }\n    return <Skeleton width=\"540px\" height=\"64px\" />\n  }\n\n  return (\n    <>\n      <Grid>\n        {achievements.map((achievement) => (\n          <AchievementCard key={achievement.id} achievement={achievement} />\n        ))}\n      </Grid>\n      {achievements.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n            {t('No achievements yet!')}\n          </Heading>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default AchievementsList\n","import React from 'react'\nimport { Flex, FlexProps, PrizeIcon, Text } from 'ntfuikit2'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PointsLabelProps extends FlexProps {\n  points: number\n}\n\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\n  const { t } = useTranslation()\n  const localePoints = points.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\n    </Flex>\n  )\n}\n\nexport default PointsLabel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from 'ntfuikit2'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\nimport PointsLabel from './PointsLabel'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleCollectPoints = async () => {\n    try {\n      const tx = await callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\n      setIsCollecting(true)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onCollectSuccess(achievement)\n        toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      } else {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsCollecting(false)\n    }\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from 'ntfuikit2'\nimport { useProfile } from 'state/profile/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","import React from 'react'\nimport { Card, CardBody, Heading, PrizeIcon } from 'ntfuikit2'\nimport { useTranslation } from 'contexts/Localization'\nimport IconStatBox from 'views/Teams/components/IconStatBox'\nimport { Achievement } from 'state/types'\nimport AchievementsList from './AchievementsList'\nimport ClaimPointsCallout from './ClaimPointsCallout'\n\nconst Achievements: React.FC<{ achievements: Achievement[]; isLoading: boolean; points?: number }> = ({\n  achievements,\n  isLoading,\n  points = 0,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Card>\n      <CardBody>\n        <IconStatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\n        <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\n          {t('Achievements')}\n        </Heading>\n        <ClaimPointsCallout />\n        <AchievementsList achievements={achievements} isLoading={isLoading} />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Achievements\n","import React from 'react'\nimport { Text, TextProps } from 'ntfuikit2'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../utils/sortUserActivity'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { Flex, BinanceIcon, Text } from 'ntfuikit2'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~$${priceInUsd.toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })})`}\n          </Text>\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from 'ntfuikit2'\nimport { Price } from 'ntfsdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { Activity } from '../../utils/sortUserActivity'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({ nft, activity, bnbBusdPrice, localeTimestamp, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })}`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('From/To')}\n            </Text>\n            <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from 'ntfuikit2'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Price } from 'ntfsdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport { Activity } from '../../utils/sortUserActivity'\nimport ActivityEventText from './ActivityEventText'\nimport ActivityPrice from './ActivityPrice'\nimport MobileModal from './MobileModal'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({ activity, bnbBusdPrice, nft }) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal nft={nft} activity={activity} localeTimestamp={localeTimestamp} bnbBusdPrice={bnbBusdPrice} />,\n  )\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      <Td>\n        <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n          <RoundedImage\n            src={nft?.image.thumbnail}\n            alt={nft?.name}\n            width={64}\n            height={64}\n            mr={[0, null, '16px']}\n            mb={['8px', null, 0]}\n          />\n          <Flex flexDirection=\"column\">\n            <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\n              {nft?.collectionName}\n            </Text>\n            <Text textAlign={['center', null, 'left']} bold>\n              {nft?.name}\n            </Text>\n          </Flex>\n        </Flex>\n      </Td>\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          <Td>\n            <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n              {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n            </Flex>\n          </Td>\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from 'ntfuikit2'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { uniqBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { fetchUserActivity } from 'state/nftMarket/reducer'\nimport { useAppDispatch } from 'state'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { ArrowBackIcon, ArrowForwardIcon, Card, Flex, Table, Text, Th, useMatchBreakpoints } from 'ntfuikit2'\nimport { getNftsFromDifferentCollectionsApi, getUserActivity } from 'state/nftMarket/helpers'\nimport { NftToken, TokenIdWithCollectionAddress, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport { useParams } from 'react-router'\nimport { Activity, sortUserActivity } from '../../utils/sortUserActivity'\nimport ActivityRow from './ActivityRow'\nimport TableLoader from './TableLoader'\nimport NoNftsImage from '../NoNftsImage'\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\n\nconst MAX_PER_PAGE = 8\n\nconst ActivityHistory = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const { activity: userActivity } = useUserNfts()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useEffect(() => {\n    if (account && userActivity.initializationState === UserNftInitializationState.INITIALIZED) {\n      const differentAddress =\n        accountAddress && isAddress(accountAddress)\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\n          : false\n      if (!differentAddress) {\n        setSortedUserActivities(sortUserActivity(account, userActivity))\n        setIsLoading(false)\n      }\n    }\n  }, [account, userActivity, accountAddress])\n\n  useEffect(() => {\n    const fetchAddressActivity = async () => {\n      try {\n        const addressActivity = await getUserActivity(accountAddress.toLocaleLowerCase())\n        setSortedUserActivities(sortUserActivity(accountAddress, addressActivity))\n        setIsLoading(false)\n      } catch (error) {\n        console.error('Failed to fetch address activity', error)\n      }\n    }\n\n    if (account) {\n      const differentAddress =\n        accountAddress && isAddress(accountAddress)\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\n          : false\n      if (differentAddress) {\n        fetchAddressActivity()\n      } else {\n        dispatch(fetchUserActivity(account))\n      }\n    } else if (accountAddress && isAddress(accountAddress)) {\n      fetchAddressActivity()\n    }\n  }, [account, accountAddress, dispatch])\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        sortedUserActivities.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages()\n      fetchActivityNftMetadata()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setNftMetadata([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedUserActivities])\n\n  useEffect(() => {\n    const getActivitiesSlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedUserActivities.length > 0) {\n      getActivitiesSlice()\n    }\n  }, [sortedUserActivities, currentPage])\n\n  return (\n    <Card>\n      {sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                <Th textAlign=\"right\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"right\"> {t('From/To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {isLoading ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nftMeta}\n                      bnbBusdPrice={bnbBusdPrice}\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\n                }}\n              >\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\n                }}\n              >\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityHistory\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLocation, useParams } from 'react-router'\nimport BaseSubMenu from '../../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../../constants'\n\nconst SubMenuComponent: React.FC = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={pathname} justifyContent=\"flex-start\" mb=\"60px\" />\n}\n\nexport default SubMenuComponent\n","import React, { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from 'ntfuikit2'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport ProfileNftModal from '../../components/ProfileNftModal'\nimport NoNftsImage from './NoNftsImage'\nimport SellModal from '../../components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts = () => {\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useProfile } from 'state/profile/hooks'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from 'ntfuikit2'\nimport Page from 'components/Layout/Page'\nimport { Route } from 'react-router'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useAchievements, useFetchAchievements } from 'state/achievements/hooks'\nimport { AchievementFetchStatus } from 'state/types'\nimport { UserNftInitializationState } from 'state/nftMarket/types'\nimport useFetchUserNfts from './hooks/useFetchUserNfts'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport UserNfts from './components/UserNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst ConnectedProfile = () => {\n  const { profile, isLoading: isProfileLoading } = useProfile()\n  const { achievements, achievementFetchStatus } = useAchievements()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n\n  useFetchAchievements()\n  useFetchUserNfts()\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={account}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={userNfts.length}\n          isProfileLoading={isProfileLoading}\n          isNftLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\n          isAchievementsLoading={achievementFetchStatus !== AchievementFetchStatus.FETCHED}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements\n            achievements={achievements}\n            isLoading={achievementFetchStatus !== AchievementFetchStatus.FETCHED}\n            points={profile?.points}\n          />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UserNfts />\n        </Route>\n      </Page>\n    </>\n  )\n}\n\nexport default ConnectedProfile\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { State, AchievementState } from '../types'\nimport { fetchAchievements } from '.'\n\nexport const useFetchAchievements = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState = useSelector((state: State) => state.achievements)\n  return achievements\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { Profile } from 'state/types'\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\n\nconst useNftsForAddress = (account: string, profile: Profile, isProfileFetching: boolean) => {\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  useEffect(() => {\n    const getNfts = async () => {\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\n      setCombinedNfts(completeNftData)\n      setIsLoading(false)\n    }\n\n    if (!isProfileFetching && !isEmpty(collections)) {\n      setIsLoading(true)\n      getNfts()\n    }\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\n\n  return { nfts: combinedNfts, isLoading }\n}\n\nexport default useNftsForAddress\n","import React from 'react'\nimport { Grid, Text, Flex } from 'ntfuikit2'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport NoNftsImage from './NoNftsImage'\n\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData } = nft\n\n            return (\n              <CollectibleLinkCard\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\nimport { Box } from 'ntfuikit2'\nimport Page from 'components/Layout/Page'\nimport { Route, useParams } from 'react-router'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport useNftsForAddress from './hooks/useNftsForAddress'\nimport UnconnectedProfileNfts from './components/UnconnectedProfileNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst UnconnectedProfile = () => {\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { profile: profileHookState, isFetching: isProfileFetching } = useProfileForAddress(accountAddress)\n  const { profile } = profileHookState || {}\n  const { achievements, isFetching: isAchievementFetching } = useAchievementsForAddress(accountAddress)\n  const { nfts, isLoading: isNftLoading } = useNftsForAddress(accountAddress, profile, isProfileFetching)\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={accountAddress}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={nfts.length}\n          isProfileLoading={isProfileFetching}\n          isNftLoading={isNftLoading}\n          isAchievementsLoading={isAchievementFetching}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements achievements={achievements} isLoading={isAchievementFetching} points={profile?.points} />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UnconnectedProfileNfts nfts={nfts} isLoading={isNftLoading} />\n        </Route>\n      </Page>\n    </>\n  )\n}\n\nexport default UnconnectedProfile\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useParams } from 'react-router'\nimport { isAddress } from 'utils'\nimport { Flex, Text } from 'ntfuikit2'\nimport Page from 'components/Layout/Page'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectedProfile from './ConnectedProfile'\nimport UnconnectedProfile from './UnconnectedProfile'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport NoNftsImage from './components/NoNftsImage'\n\nconst NftProfile = () => {\n  const { account } = useWeb3React()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { t } = useTranslation()\n\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\n  const invalidAddress = !accountAddress || isAddress(accountAddress) === false\n\n  if (invalidAddress) {\n    return (\n      <>\n        <MarketPageHeader position=\"relative\">\n          <ProfileHeader\n            accountPath={accountAddress}\n            profile={null}\n            achievements={null}\n            nftCollected={null}\n            isAchievementsLoading={false}\n            isNftLoading={false}\n            isProfileLoading={false}\n          />\n        </MarketPageHeader>\n        <Page style={{ minHeight: 'auto' }}>\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text textAlign=\"center\" maxWidth=\"420px\" pt=\"8px\" bold>\n              {t('Please enter a valid address, or connect your wallet to view your profile')}\n            </Text>\n          </Flex>\n        </Page>\n      </>\n    )\n  }\n\n  return <>{isConnectedProfile ? <ConnectedProfile /> : <UnconnectedProfile />}</>\n}\n\nexport default NftProfile\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","import React from 'react'\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from 'ntfuikit2'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"258px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from 'ntfuikit2'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import React, { ElementType, ReactNode } from 'react'\nimport { Flex, Heading, Text, TextProps } from 'ntfuikit2'\nimport styled from 'styled-components'\n\nconst SecondaryCard = styled(Text)`\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px;\n`\n\nSecondaryCard.defaultProps = {\n  p: '24px',\n}\n\ninterface IconStatBoxProps extends TextProps {\n  icon: ElementType\n  title: ReactNode\n  subtitle: ReactNode\n  isDisabled?: boolean\n}\n\nconst IconStatBox: React.FC<IconStatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\n  return (\n    <SecondaryCard {...props}>\n      <Flex alignItems=\"start\">\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\n        <div>\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\n            {title}\n          </Heading>\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\n            {subtitle}\n          </Text>\n        </div>\n      </Flex>\n    </SecondaryCard>\n  )\n}\n\nexport default IconStatBox\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from 'ntfuikit2'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import { SubMenuItems } from 'ntfuikit2'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n"],"sourceRoot":""}